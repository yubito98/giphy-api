{"ast":null,"code":"// creates a matcher function\nexport default function makeMatcher() {\n  let makeRegexpFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : pathToRegexp;\n  let cache = {};\n\n  // obtains a cached regexp version of the pattern\n  const getRegexp = pattern => cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));\n  return (pattern, path) => {\n    const {\n      regexp,\n      keys\n    } = getRegexp(pattern || \"\");\n    const out = regexp.exec(path);\n    if (!out) return [false, null];\n\n    // formats an object with matched params\n    const params = keys.reduce((params, key, i) => {\n      params[key.name] = out[i + 1];\n      return params;\n    }, {});\n    return [true, params];\n  };\n}\n\n// escapes a regexp string (borrowed from path-to-regexp sources)\n// https://github.com/pillarjs/path-to-regexp/blob/v3.0.0/index.js#L202\nconst escapeRx = str => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n// returns a segment representation in RegExp based on flags\n// adapted and simplified version from path-to-regexp sources\nconst rxForSegment = (repeat, optional, prefix) => {\n  let capture = repeat ? \"((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*)\" : \"([^\\\\/]+?)\";\n  if (optional && prefix) capture = \"(?:\\\\/\" + capture + \")\";\n  return capture + (optional ? \"?\" : \"\");\n};\nconst pathToRegexp = pattern => {\n  const groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;\n  let match = null,\n    lastIndex = 0,\n    keys = [],\n    result = \"\";\n  while ((match = groupRx.exec(pattern)) !== null) {\n    const [_, segment, mod] = match;\n\n    // :foo  [1]      (  )\n    // :foo? [0 - 1]  ( o)\n    // :foo+ [1 - ∞]  (r )\n    // :foo* [0 - ∞]  (ro)\n    const repeat = mod === \"+\" || mod === \"*\";\n    const optional = mod === \"?\" || mod === \"*\";\n    const prefix = optional && pattern[match.index - 1] === \"/\" ? 1 : 0;\n    const prev = pattern.substring(lastIndex, match.index - prefix);\n    keys.push({\n      name: segment\n    });\n    lastIndex = groupRx.lastIndex;\n    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);\n  }\n  result += escapeRx(pattern.substring(lastIndex));\n  return {\n    keys,\n    regexp: new RegExp(\"^\" + result + \"(?:\\\\/)?$\", \"i\")\n  };\n};","map":{"version":3,"names":["makeMatcher","makeRegexpFn","pathToRegexp","cache","getRegexp","pattern","path","regexp","keys","out","exec","params","reduce","key","i","name","escapeRx","str","replace","rxForSegment","repeat","optional","prefix","capture","groupRx","match","lastIndex","result","_","segment","mod","index","prev","substring","push","RegExp"],"sources":["C:/Users/yubor/Desktop/projects/gighy-api/node_modules/wouter/matcher.js"],"sourcesContent":["// creates a matcher function\nexport default function makeMatcher(makeRegexpFn = pathToRegexp) {\n  let cache = {};\n\n  // obtains a cached regexp version of the pattern\n  const getRegexp = (pattern) =>\n    cache[pattern] || (cache[pattern] = makeRegexpFn(pattern));\n\n  return (pattern, path) => {\n    const { regexp, keys } = getRegexp(pattern || \"\");\n    const out = regexp.exec(path);\n\n    if (!out) return [false, null];\n\n    // formats an object with matched params\n    const params = keys.reduce((params, key, i) => {\n      params[key.name] = out[i + 1];\n      return params;\n    }, {});\n\n    return [true, params];\n  };\n}\n\n// escapes a regexp string (borrowed from path-to-regexp sources)\n// https://github.com/pillarjs/path-to-regexp/blob/v3.0.0/index.js#L202\nconst escapeRx = (str) => str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n\n// returns a segment representation in RegExp based on flags\n// adapted and simplified version from path-to-regexp sources\nconst rxForSegment = (repeat, optional, prefix) => {\n  let capture = repeat ? \"((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*)\" : \"([^\\\\/]+?)\";\n  if (optional && prefix) capture = \"(?:\\\\/\" + capture + \")\";\n  return capture + (optional ? \"?\" : \"\");\n};\n\nconst pathToRegexp = (pattern) => {\n  const groupRx = /:([A-Za-z0-9_]+)([?+*]?)/g;\n\n  let match = null,\n    lastIndex = 0,\n    keys = [],\n    result = \"\";\n\n  while ((match = groupRx.exec(pattern)) !== null) {\n    const [_, segment, mod] = match;\n\n    // :foo  [1]      (  )\n    // :foo? [0 - 1]  ( o)\n    // :foo+ [1 - ∞]  (r )\n    // :foo* [0 - ∞]  (ro)\n    const repeat = mod === \"+\" || mod === \"*\";\n    const optional = mod === \"?\" || mod === \"*\";\n    const prefix = optional && pattern[match.index - 1] === \"/\" ? 1 : 0;\n\n    const prev = pattern.substring(lastIndex, match.index - prefix);\n\n    keys.push({ name: segment });\n    lastIndex = groupRx.lastIndex;\n\n    result += escapeRx(prev) + rxForSegment(repeat, optional, prefix);\n  }\n\n  result += escapeRx(pattern.substring(lastIndex));\n  return { keys, regexp: new RegExp(\"^\" + result + \"(?:\\\\/)?$\", \"i\") };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}