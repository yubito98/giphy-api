{"ast":null,"code":"import _slicedToArray from \"C:/Users/yubor/Desktop/projects/gighy-api/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nvar eventPopstate = \"popstate\";\nvar eventPushState = \"pushState\";\nvar eventReplaceState = \"replaceState\";\nexport var events = [eventPopstate, eventPushState, eventReplaceState];\nexport default (function () {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$base = _ref.base,\n    base = _ref$base === void 0 ? \"\" : _ref$base;\n  var _useState = useState(function () {\n      return {\n        path: currentPathname(base),\n        search: location.search\n      };\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    _useState2$ = _useState2[0],\n    path = _useState2$.path,\n    search = _useState2$.search,\n    update = _useState2[1]; // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  var prevHash = useRef(path + search);\n  useEffect(function () {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    var checkForUpdates = function checkForUpdates() {\n      var pathname = currentPathname(base);\n      var search = location.search;\n      var hash = pathname + search;\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update({\n          path: pathname,\n          search: search\n        });\n      }\n    };\n    events.forEach(function (e) {\n      return addEventListener(e, checkForUpdates);\n    });\n\n    // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n    checkForUpdates();\n    return function () {\n      return events.forEach(function (e) {\n        return removeEventListener(e, checkForUpdates);\n      });\n    };\n  }, [base]);\n\n  // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n  var navigate = useCallback(function (to) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$replace = _ref2.replace,\n      replace = _ref2$replace === void 0 ? false : _ref2$replace;\n    return history[replace ? eventReplaceState : eventPushState](null, \"\",\n    // handle nested routers and absolute paths\n    to[0] === \"~\" ? to.slice(1) : base + to);\n  }, [base]);\n  return [path, navigate];\n});\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  var _loop = function _loop() {\n    var type = _arr[_i];\n    var original = history[type];\n    history[type] = function () {\n      var result = original.apply(this, arguments);\n      var event = new Event(type);\n      event.arguments = arguments;\n      dispatchEvent(event);\n      return result;\n    };\n  };\n  for (var _i = 0, _arr = [eventPushState, eventReplaceState]; _i < _arr.length; _i++) {\n    _loop();\n  }\n}\nvar currentPathname = function currentPathname(base) {\n  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.pathname;\n  return !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || \"/\" : \"~\" + path;\n};","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","eventPopstate","eventPushState","eventReplaceState","events","base","path","currentPathname","search","location","update","prevHash","checkForUpdates","pathname","hash","current","forEach","e","addEventListener","removeEventListener","navigate","to","replace","history","slice","type","original","result","apply","arguments","event","Event","dispatchEvent","toLowerCase","indexOf","length"],"sources":["C:/Users/yubor/Desktop/projects/gighy-api/node_modules/wouter/use-location.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from \"./react-deps.js\";\n\n/**\n * History API docs @see https://developer.mozilla.org/en-US/docs/Web/API/History\n */\nconst eventPopstate = \"popstate\";\nconst eventPushState = \"pushState\";\nconst eventReplaceState = \"replaceState\";\nexport const events = [eventPopstate, eventPushState, eventReplaceState];\n\nexport default ({ base = \"\" } = {}) => {\n  const [{ path, search }, update] = useState(() => ({\n    path: currentPathname(base),\n    search: location.search,\n  })); // @see https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const prevHash = useRef(path + search);\n\n  useEffect(() => {\n    // this function checks if the location has been changed since the\n    // last render and updates the state only when needed.\n    // unfortunately, we can't rely on `path` value here, since it can be stale,\n    // that's why we store the last pathname in a ref.\n    const checkForUpdates = () => {\n      const pathname = currentPathname(base);\n      const search = location.search;\n      const hash = pathname + search;\n\n      if (prevHash.current !== hash) {\n        prevHash.current = hash;\n        update({ path: pathname, search });\n      }\n    };\n\n    events.forEach((e) => addEventListener(e, checkForUpdates));\n\n    // it's possible that an update has occurred between render and the effect handler,\n    // so we run additional check on mount to catch these updates. Based on:\n    // https://gist.github.com/bvaughn/e25397f70e8c65b0ae0d7c90b731b189\n    checkForUpdates();\n\n    return () => events.forEach((e) => removeEventListener(e, checkForUpdates));\n  }, [base]);\n\n  // the 2nd argument of the `useLocation` return value is a function\n  // that allows to perform a navigation.\n  //\n  // the function reference should stay the same between re-renders, so that\n  // it can be passed down as an element prop without any performance concerns.\n  const navigate = useCallback(\n    (to, { replace = false } = {}) =>\n      history[replace ? eventReplaceState : eventPushState](\n        null,\n        \"\",\n        // handle nested routers and absolute paths\n        to[0] === \"~\" ? to.slice(1) : base + to\n      ),\n    [base]\n  );\n\n  return [path, navigate];\n};\n\n// While History API does have `popstate` event, the only\n// proper way to listen to changes via `push/replaceState`\n// is to monkey-patch these methods.\n//\n// See https://stackoverflow.com/a/4585031\nif (typeof history !== \"undefined\") {\n  for (const type of [eventPushState, eventReplaceState]) {\n    const original = history[type];\n\n    history[type] = function () {\n      const result = original.apply(this, arguments);\n      const event = new Event(type);\n      event.arguments = arguments;\n\n      dispatchEvent(event);\n      return result;\n    };\n  }\n}\n\nconst currentPathname = (base, path = location.pathname) =>\n  !path.toLowerCase().indexOf(base.toLowerCase())\n    ? path.slice(base.length) || \"/\"\n    : \"~\" + path;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}